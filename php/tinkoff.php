<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\abstract\tinkoff as Exchange;

class tinkoff extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'tinkoff',
            'name' => 'Tinkoff',
            'countries' => array( 'RU' ),
            'rateLimit' => 333,
            'hostname' => 'tinkoff.ru',
            'pro' => true,
            'urls' => array(
                'logo' => 'https://developer.tinkoff.ru/img/logo_origin.svg',
                'www' => 'https://tinkoff.ru',
                'api' => array(
                    'instruments' => 'https://invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.InstrumentsService',
                    'marketdata' => 'https://invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.MarketDataService',
                    'operations' => 'https://invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.OperationsService',
                    'orders' => 'https://invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.OrdersService',
                    'sandbox' => 'https://invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.SandboxService',
                    'stoporders' => 'https://invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.StopOrdersService',
                    'users' => 'https://invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.UsersService',
                    'marketdatastream' => 'https://invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.MarketDataStreamService',
                    'operationsstream' => 'https://invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.OperationsStreamService',
                    'ordersstream' => 'https://invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.OrdersStreamService',
                ),
                'test' => array(
                    'instruments' => 'https://sandbox-invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.InstrumentsService',
                    'marketdata' => 'https://sandbox-invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.MarketDataService',
                    'operations' => 'https://sandbox-invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.OperationsService',
                    'orders' => 'https://sandbox-invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.OrdersService',
                    'sandbox' => 'https://sandbox-invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.SandboxService',
                    'stoporders' => 'https://sandbox-invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.StopOrdersService',
                    'users' => 'https://sandbox-invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.UsersService',
                    'marketdatastream' => 'https://sandbox-invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.MarketDataStreamService',
                    'operationsstream' => 'https://sandbox-invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.OperationsStreamService',
                    'ordersstream' => 'https://sandbox-invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.OrdersStreamService',
                ),
                'doc' => 'https://russianinvestments.github.io/investAPI/',
            ),
            'has' => array(
                'CORS' => false,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'closeAllPositions' => false,
                'closePosition' => false,
                'createOrder' => true,
                'fetchBalance' => false,
                'fetchBidsAsks' => false,
                'fetchClosedOrders' => true,
                'fetchCurrencies' => false,
                'fetchDepositAddress' => false,
                'fetchDepositAddressesByNetwork' => false,
                'fetchDeposits' => false,
                'fetchDepositsWithdrawals' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRates' => false,
                'fetchL1OrderBook' => true,
                'fetchL2OrderBook' => false,
                'fetchMarkets' => true,
                'fetchMyTrades' => false,
                'fetchOHLCV' => true,
                'fetchOpenOrder' => false,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrders' => true,
                'fetchPositions' => false,
                'fetchStatus' => false,
                'fetchTicker' => false,
                'fetchTickers' => false,
                'fetchTime' => false,
                'fetchTrades' => true,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchTransactionFees' => false,
                'fetchTransactions' => false,
                'fetchTransfers' => false,
                'fetchWithdrawals' => false,
                'publicAPI' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'api' => array(
                'instruments' => array(
                    'post' => array(
                        'Etfs',
                    ),
                ),
                'marketdata' => array(
                    'post' => array(
                        'GetLastTrades',
                        'GetOrderBook',
                        'GetCandles',
                    ),
                ),
                'orders' => array(
                    'post' => array(
                        'PostOrder',
                        'CancelOrder',
                        'GetOrderState',
                        'GetOrders',
                    ),
                ),
            ),
            'timeframes' => array(
                '1m' => 'CANDLE_INTERVAL_1_MIN',
                '2m' => 'CANDLE_INTERVAL_2_MIN',
                '3m' => 'CANDLE_INTERVAL_3_MIN',
                '5m' => 'CANDLE_INTERVAL_5_MIN',
                '10m' => 'CANDLE_INTERVAL_10_MIN',
                '15m' => 'CANDLE_INTERVAL_15_MIN',
                '30m' => 'CANDLE_INTERVAL_15_MIN',
                '1h' => 'CANDLE_INTERVAL_HOUR',
                '2h' => 'CANDLE_INTERVAL_2_HOUR',
                '4h' => 'CANDLE_INTERVAL_4_HOUR',
                '1d' => 'CANDLE_INTERVAL_DAY',
                '1w' => 'CANDLE_INTERVAL_WEEK',
                '1M' => 'CANDLE_INTERVAL_MONTH',
            ),
            'precisionMode' => TICK_SIZE,
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => false,
            ),
            'options' => array(
            ),
            'exceptions' => array(
                'exact' => array(
                    '3' => 'Could not fetch historical candles due to ExchangeNotAvailable',
                    '40003' => '\\ccxt\\PermissionDenied',
                    '80002' => '\\ccxt\\RateLimitExceeded',
                ),
            ),
        ));
    }

    public function fetch_markets($params = array ()) {
        /**
         * retrieves data on all $markets for tinkoff
         * @see https://docs.alpaca.markets/reference/get-v2-assets
         * @param {array} [$params] extra parameters specific to the exchange api endpoint
         * @return {array[]} an array of objects representing market data
         */
        $request = array(
            'instrumentStatus' => 'INSTRUMENT_STATUS_BASE',
        );
        $etfs = $this->instrumentsPostEtfs (array_merge($request, $params));
        $markets = $this->parse_markets($etfs['instruments']);
        return $markets;
    }

    public function parse_market($asset): array {
        //
        // {
        //     'figi' => 'BBG00KLHY7D7',
        //     'ticker' => 'DRIV',
        //     'classCode' => 'SPBXM',
        //     'isin' => 'US37954Y6243',
        //     'lot' => '1',
        //     'currency' => 'usd',
        //     'shortEnabledFlag' => False,
        //     'name' => 'Global X Autonomous & Electric Vehicles ETF',
        //     'exchange' => 'spb_close',
        //     'focusType' => 'equity',
        //     'countryOfRisk' => 'US',
        //     'countryOfRiskName' => 'Соединенные Штаты Америки',
        //     'sector' => '',
        //     'rebalancingFreq' => '',
        //     'tradingStatus' => 'SECURITY_TRADING_STATUS_NOT_AVAILABLE_FOR_TRADING',
        //     'otcFlag' => False,
        //     'buyAvailableFlag' => True,
        //     'sellAvailableFlag' => True,
        //     'minPriceIncrement' => array('units' => '0', 'nano' => '10000000'),
        //     'apiTradeAvailableFlag' => True,
        //     'uid' => '1e15b3a8-9a46-44af-8cf1-59893d0c478f',
        //     'positionUid' => 'c76c4b4c-74b2-41d5-902a-da8a1848c5a5',
        //     'assetUid' => 'f9f2e0e0-3f73-4ecd-a3bb-363e29058ed6',
        //     'forIisFlag' => False,
        //     'forQualInvestorFlag' => True,
        //     'weekendFlag' => False,
        //     'blockedTcaFlag' => False,
        //     'liquidityFlag' => True,
        //     'first1minCandleDate' => '2023-01-23T12:31:00Z',
        //     'first1dayCandleDate' => '2023-01-23T07:00:00Z',
        //     'brand' => array('logoName' => 'US37954Y6243.png', 'logoBaseColor' => '#FF4E00', 'textColor' => '#ffffff')
        // }
        //
        $marketId = $this->safe_string($asset, 'uid');
        $baseId = $this->safe_string($asset, 'ticker');
        $quoteId = $this->safe_string($asset, 'currency');
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $symbol = $base;
        $active = $this->safe_value($asset, 'forIisFlag');
        $minAmount = $this->safe_number($asset, 'lot');
        $amount = 1;
        $increment = $this->safe_value($asset, 'minPriceIncrement');
        $units = $this->safe_number($increment, 'units');
        $nano = $this->safe_number($increment, 'nano');
        $price = $units . $nano / 1000000000;
        return array(
            'id' => $marketId,
            'symbol' => $symbol,
            'base' => $base,
            'quote' => $quote,
            'settle' => null,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => null,
            'type' => 'spot',
            'spot' => true,
            'margin' => null,
            'swap' => false,
            'future' => false,
            'option' => false,
            'active' => $active,
            'contract' => false,
            'linear' => null,
            'inverse' => null,
            'contractSize' => null,
            'expiry' => null,
            'expiryDatetime' => null,
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => $amount,
                'price' => $price,
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => null,
                    'max' => null,
                ),
                'amount' => array(
                    'min' => $minAmount,
                    'max' => null,
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
            'created' => null,
            'info' => $asset,
        );
    }

    public function fetch_trades(string $symbol, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * get the list of most recent $trades for a particular $symbol
         * @see https://docs.alpaca.markets/reference/cryptotrades
         * @see https://docs.alpaca.markets/reference/cryptolatesttrades
         * @param {string} $symbol unified $symbol of the $market to fetch $trades for
         * @param {int} [$since] timestamp in ms of the earliest trade to fetch
         * @param {int} [$limit] the maximum amount of $trades to fetch
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->loc] crypto location, default => us
         * @param {string} [$params->method] method, default => marketPublicGetV1beta3CryptoLocTrades
         * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=public-$trades trade structures~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $marketId = $market['id'];
        $loc = $this->safe_string($params, 'loc', 'us');
        $request = array(
            'symbols' => $marketId,
            'loc' => $loc,
        );
        $params = $this->omit($params, array( 'loc', 'method' ));
        if ($since !== null) {
            $request['start'] = $this->iso8601($since);
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->marketdataPostGetLastTrades (array_merge($request, $params));
        //
        // {
        //     "next_page_token":null,
        //     "trades":{
        //        "BTC/USD":array(
        //           {
        //              "i":36440704,
        //              "p":22625,
        //              "s":0.0001,
        //              "t":"2022-07-21T11:47:31.073391Z",
        //              "tks":"B"
        //           }
        //        )
        //     }
        // }
        //
        // {
        //     "trades":{
        //        "BTC/USD":{
        //           "i":36440704,
        //           "p":22625,
        //           "s":0.0001,
        //           "t":"2022-07-21T11:47:31.073391Z",
        //           "tks":"B"
        //        }
        //     }
        // }
        //
        $trades = $this->safe_value($response, 'trades', array());
        $symbolTrades = $this->safe_value($trades, $marketId, array());
        if (gettype($symbolTrades) !== 'array' || array_keys($symbolTrades) !== array_keys(array_keys($symbolTrades))) {
            $symbolTrades = array( $symbolTrades );
        }
        return $this->parse_trades($symbolTrades, $market, $since, $limit);
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()): array {
        /**
         * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @see https://docs.alpaca.markets/reference/cryptolatestorderbooks
         * @param {string} $symbol unified $symbol of the $market to fetch the order book for
         * @param {int} [$limit] the maximum amount of order book entries to return
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->loc] crypto location, default => us
         * @return {array} A dictionary of {@link https://github.com/ccxt/ccxt/wiki/Manual#order-book-structure order book structures} indexed by $market symbols
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $id = $market['id'];
        $loc = $this->safe_string($params, 'loc', 'us');
        $request = array(
            'symbols' => $id,
            'loc' => $loc,
        );
        $response = $this->marketdataPostGetOrderBook (array_merge($request, $params));
        //
        //   {
        //       "orderbooks":{
        //          "BTC/USD":{
        //             "a":array(
        //                array(
        //                   "p":22208,
        //                   "s":0.0051
        //                ),
        //                array(
        //                   "p":22209,
        //                   "s":0.1123
        //                ),
        //                {
        //                   "p":22210,
        //                   "s":0.2465
        //                }
        //             ),
        //             "b":array(
        //                array(
        //                   "p":22203,
        //                   "s":0.395
        //                ),
        //                array(
        //                   "p":22202,
        //                   "s":0.2465
        //                ),
        //                {
        //                   "p":22201,
        //                   "s":0.6455
        //                }
        //             ),
        //             "t":"2022-07-19T13:41:55.13210112Z"
        //          }
        //       }
        //   }
        //
        $orderbooks = $this->safe_value($response, 'orderbooks', array());
        $rawOrderbook = $this->safe_value($orderbooks, $id, array());
        $timestamp = $this->parse8601($this->safe_string($rawOrderbook, 't'));
        return $this->parse_order_book($rawOrderbook, $market['symbol'], $timestamp, 'b', 'a', 'p', 's');
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = 0, ?int $limit = null, $params = array ()): array {
        /**
         * fetches historical candlestick data containing the open, high, low, and close price, and the volume of a $market
         * @param {string} $symbol unified $symbol of the $market $to fetch OHLCV data for
         * @param {string} $timeframe the length of time each candle represents
         * @param {int} [$since] timestamp in ms of the earliest candle $to fetch
         * @param {int} [$limit] the maximum amount of candles $to fetch
         * @return {int[][]} A list of candles ordered, open, high, low, close, volume
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $marketId = $market['id'];
        $request = array(
            'instrumentId' => $marketId,
        );
        // $request->instrumentId = '9654c2dd-6993-427e-80fa-04e80a1cf4da'
        $duration = $this->parse_timeframe($timeframe);
        $options = $this->safe_value($this->options, 'fetchOHLCV', array());
        $defaultLimit = $this->safe_integer($options, 'limit', 500);
        if ($limit === null) {
            $limit = $defaultLimit;
        } else {
            $limit = min ($limit, $defaultLimit);
        }
        $to = $this->sum($since, $limit * $duration * 1000, 1);
        $request['from'] = $this->ymdhms($since);
        $request['to'] = $this->ymdhms($to);
        $request['interval'] = $this->safe_string($this->timeframes, $timeframe, 'CANDLE_INTERVAL_UNSPECIFIED');
        $this->log('request', $request);
        $response = $this->marketdataPostGetCandles (array_merge($request, $params));
        $this->log('response', $response);
        $this->log('response2', strlen($response));
        $this->log('response3', $response->keys ());
        //
        //    {
        //        "bars":{
        //           "BTC/USD":array(
        //              array(
        //                 "c":22887,
        //                 "h":22888,
        //                 "l":22873,
        //                 "n":11,
        //                 "o":22883,
        //                 "t":"2022-07-21T05:00:00Z",
        //                 "v":1.1138,
        //                 "vw":22883.0155324116
        //              ),
        //              array(
        //                 "c":22895,
        //                 "h":22895,
        //                 "l":22884,
        //                 "n":6,
        //                 "o":22884,
        //                 "t":"2022-07-21T05:01:00Z",
        //                 "v":0.001,
        //                 "vw":22889.5
        //              }
        //           )
        //        ),
        //        "next_page_token":"QlRDL1VTRHxNfDIwMjItMDctMjFUMDU6MDE6MDAuMDAwMDAwMDAwWg=="
        //     }
        //
        //    {
        //        "bars":{
        //           "BTC/USD":{
        //              "c":22887,
        //              "h":22888,
        //              "l":22873,
        //              "n":11,
        //              "o":22883,
        //              "t":"2022-07-21T05:00:00Z",
        //              "v":1.1138,
        //              "vw":22883.0155324116
        //           }
        //        }
        //     }
        //
        $bars = $this->safe_value($response, 'bars', array());
        $ohlcvs = $this->safe_value($bars, $marketId, array());
        if (gettype($ohlcvs) !== 'array' || array_keys($ohlcvs) !== array_keys(array_keys($ohlcvs))) {
            $ohlcvs = array( $ohlcvs );
        }
        return $this->parse_ohlcvs($ohlcvs, $market, $timeframe, $since, $limit);
    }

    public function parse_ohlcv($ohlcv, ?array $market = null): array {
        //
        //     {
        //        "c":22895,
        //        "h":22895,
        //        "l":22884,
        //        "n":6,
        //        "o":22884,
        //        "t":"2022-07-21T05:01:00Z",
        //        "v":0.001,
        //        "vw":22889.5
        //     }
        //
        $datetime = $this->safe_string($ohlcv, 't');
        $timestamp = $this->parse8601($datetime);
        return array(
            $timestamp, // $timestamp
            $this->safe_number($ohlcv, 'o'), // open
            $this->safe_number($ohlcv, 'h'), // high
            $this->safe_number($ohlcv, 'l'), // low
            $this->safe_number($ohlcv, 'c'), // close
            $this->safe_number($ohlcv, 'v'), // volume
        );
    }

    public function create_order(string $symbol, string $type, string $side, float $amount, ?float $price = null, $params = array ()) {
        /**
         * create a trade $order
         * @see https://docs.alpaca.markets/reference/postorder
         * @param {string} $symbol unified $symbol of the $market to create an $order in
         * @param {string} $type 'market', 'limit' or 'stop_limit'
         * @param {string} $side 'buy' or 'sell'
         * @param {float} $amount how much of currency you want to trade in units of base currency
         * @param {float} [$price] the $price at which the $order is to be fullfilled, in units of the quote currency, ignored in $market orders
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {float} [$params->triggerPrice] The $price at which a trigger $order is triggered at
         * @return {array} an ~@link https://docs.ccxt.com/#/?$id=$order-structure $order structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $id = $market['id'];
        $request = array(
            'symbol' => $id,
            'qty' => $this->amount_to_precision($symbol, $amount),
            'side' => $side,
            'type' => $type, // $market, limit, stop_limit
        );
        $triggerPrice = $this->safe_string_n($params, array( 'triggerPrice', 'stop_price' ));
        if ($triggerPrice !== null) {
            $newType = null;
            if (mb_strpos($type, 'limit') !== false) {
                $newType = 'stop_limit';
            } else {
                throw new NotSupported($this->id . ' createOrder() does not support stop orders for ' . $type . ' orders, only stop_limit orders are supported');
            }
            $request['stop_price'] = $this->price_to_precision($symbol, $triggerPrice);
            $request['type'] = $newType;
        }
        if (mb_strpos($type, 'limit') !== false) {
            $request['limit_price'] = $this->price_to_precision($symbol, $price);
        }
        $defaultTIF = $this->safe_string($this->options, 'defaultTimeInForce');
        $request['time_in_force'] = $this->safe_string($params, 'timeInForce', $defaultTIF);
        $params = $this->omit($params, array( 'timeInForce', 'triggerPrice' ));
        $clientOrderIdprefix = $this->safe_string($this->options, 'clientOrderId');
        $uuid = $this->uuid();
        $parts = explode('-', $uuid);
        $random_id = implode('', $parts);
        $defaultClientId = $this->implode_params($clientOrderIdprefix, array( 'id' => $random_id ));
        $clientOrderId = $this->safe_string($params, 'clientOrderId', $defaultClientId);
        $request['client_order_id'] = $clientOrderId;
        $params = $this->omit($params, array( 'clientOrderId' ));
        $order = $this->ordersPostPostOrder (array_merge($request, $params));
        //
        //   {
        //      "id" => "61e69015-8549-4bfd-b9c3-01e75843f47d",
        //      "client_order_id" => "eb9e2aaa-f71a-4f51-b5b4-52a6c565dad4",
        //      "created_at" => "2021-03-16T18:38:01.942282Z",
        //      "updated_at" => "2021-03-16T18:38:01.942282Z",
        //      "submitted_at" => "2021-03-16T18:38:01.937734Z",
        //      "filled_at" => null,
        //      "expired_at" => null,
        //      "canceled_at" => null,
        //      "failed_at" => null,
        //      "replaced_at" => null,
        //      "replaced_by" => null,
        //      "replaces" => null,
        //      "asset_id" => "b0b6dd9d-8b9b-48a9-ba46-b9d54906e415",
        //      "symbol" => "AAPL",
        //      "asset_class" => "us_equity",
        //      "notional" => "500",
        //      "qty" => null,
        //      "filled_qty" => "0",
        //      "filled_avg_price" => null,
        //      "order_class" => "",
        //      "order_type" => "market",
        //      "type" => "market",
        //      "side" => "buy",
        //      "time_in_force" => "day",
        //      "limit_price" => null,
        //      "stop_price" => null,
        //      "status" => "accepted",
        //      "extended_hours" => false,
        //      "legs" => null,
        //      "trail_percent" => null,
        //      "trail_price" => null,
        //      "hwm" => null
        //   }
        //
        return $this->parse_order($order, $market);
    }

    public function cancel_order(string $id, ?string $symbol = null, $params = array ()) {
        /**
         * cancels an open order
         * @see https://docs.alpaca.markets/reference/deleteorderbyorderid
         * @param {string} $id order $id
         * @param {string} $symbol unified $symbol of the market the order was made in
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
         */
        $request = array(
            'order_id' => $id,
        );
        $response = $this->ordersPostCancelOrder (array_merge($request, $params));
        //
        //   {
        //       "code" => 40410000,
        //       "message" => "order is not found."
        //   }
        //
        return $this->safe_value($response, 'message', array());
    }

    public function cancel_all_orders(?string $symbol = null, $params = array ()) {
        /**
         * cancel all open orders in a market
         * @see https://docs.alpaca.markets/reference/deleteallorders
         * @param {string} $symbol alpaca cancelAllOrders cannot setting $symbol, it will cancel all open orders
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        $this->load_markets();
        $response = $this->ordersPostCancelOrder ($params);
        if (gettype($response) === 'array' && array_keys($response) === array_keys(array_keys($response))) {
            return $this->parse_orders($response, null);
        } else {
            return $response;
        }
    }

    public function fetch_order(string $id, ?string $symbol = null, $params = array ()) {
        /**
         * fetches information on an $order made by the user
         * @see https://docs.alpaca.markets/reference/getorderbyorderid
         * @param {string} $symbol unified $symbol of the $market the $order was made in
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} An ~@link https://docs.ccxt.com/#/?$id=$order-structure $order structure~
         */
        $this->load_markets();
        $request = array(
            'order_id' => $id,
        );
        $order = $this->ordersPostGetOrderState (array_merge($request, $params));
        $marketId = $this->safe_string($order, 'symbol');
        $market = $this->safe_market($marketId);
        return $this->parse_order($order, $market);
    }

    public function fetch_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetches information on multiple orders made by the user
         * @see https://docs.alpaca.markets/reference/getallorders
         * @param {string} $symbol unified $market $symbol of the $market orders were made in
         * @param {int} [$since] the earliest time in ms to fetch orders for
         * @param {int} [$limit] the maximum number of order structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] the latest time in ms to fetch orders for
         * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        $this->load_markets();
        $request = array(
            'status' => 'all',
        );
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbols'] = $market['id'];
        }
        $until = $this->safe_integer($params, 'until');
        if ($until !== null) {
            $params = $this->omit($params, 'until');
            $request['endTime'] = $until;
        }
        if ($since !== null) {
            $request['after'] = $since;
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->ordersPostGetOrders (array_merge($request, $params));
        //
        //     array(
        //         {
        //           "id" => "cbaf12d7-69b8-49c0-a31b-b46af35c755c",
        //           "client_order_id" => "ccxt_b36156ae6fd44d098ac9c179bab33efd",
        //           "created_at" => "2023-11-17T04:21:42.234579Z",
        //           "updated_at" => "2023-11-17T04:22:34.442765Z",
        //           "submitted_at" => "2023-11-17T04:21:42.233357Z",
        //           "filled_at" => null,
        //           "expired_at" => null,
        //           "canceled_at" => "2023-11-17T04:22:34.399019Z",
        //           "failed_at" => null,
        //           "replaced_at" => null,
        //           "replaced_by" => null,
        //           "replaces" => null,
        //           "asset_id" => "77c6f47f-0939-4b23-b41e-47b4469c4bc8",
        //           "symbol" => "LTC/USDT",
        //           "asset_class" => "crypto",
        //           "notional" => null,
        //           "qty" => "0.001",
        //           "filled_qty" => "0",
        //           "filled_avg_price" => null,
        //           "order_class" => "",
        //           "order_type" => "limit",
        //           "type" => "limit",
        //           "side" => "sell",
        //           "time_in_force" => "gtc",
        //           "limit_price" => "1000",
        //           "stop_price" => null,
        //           "status" => "canceled",
        //           "extended_hours" => false,
        //           "legs" => null,
        //           "trail_percent" => null,
        //           "trail_price" => null,
        //           "hwm" => null,
        //           "subtag" => null,
        //           "source" => "access_key"
        //         }
        //     )
        //
        return $this->parse_orders($response, $market, $since, $limit);
    }

    public function fetch_open_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetch all unfilled currently open orders
         * @see https://docs.alpaca.markets/reference/getallorders
         * @param {string} $symbol unified market $symbol of the market orders were made in
         * @param {int} [$since] the earliest time in ms to fetch orders for
         * @param {int} [$limit] the maximum number of order structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] the latest time in ms to fetch orders for
         * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        $request = array(
            'status' => 'open',
        );
        return $this->fetch_orders($symbol, $since, $limit, array_merge($request, $params));
    }

    public function fetch_closed_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetches information on multiple closed orders made by the user
         * @see https://docs.alpaca.markets/reference/getallorders
         * @param {string} $symbol unified market $symbol of the market orders were made in
         * @param {int} [$since] the earliest time in ms to fetch orders for
         * @param {int} [$limit] the maximum number of order structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] the latest time in ms to fetch orders for
         * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        $request = array(
            'status' => 'closed',
        );
        return $this->fetch_orders($symbol, $since, $limit, array_merge($request, $params));
    }

    public function parse_order($order, ?array $market = null): array {
        //
        //    {
        //        "id":"6ecfcc34-4bed-4b53-83ba-c564aa832a81",
        //        "client_order_id":"ccxt_1c6ceab0b5e84727b2f1c0394ba17560",
        //        "created_at":"2022-06-14T13:59:30.224037068Z",
        //        "updated_at":"2022-06-14T13:59:30.224037068Z",
        //        "submitted_at":"2022-06-14T13:59:30.221856828Z",
        //        "filled_at":null,
        //        "expired_at":null,
        //        "canceled_at":null,
        //        "failed_at":null,
        //        "replaced_at":null,
        //        "replaced_by":null,
        //        "replaces":null,
        //        "asset_id":"64bbff51-59d6-4b3c-9351-13ad85e3c752",
        //        "symbol":"BTCUSD",
        //        "asset_class":"crypto",
        //        "notional":null,
        //        "qty":"0.01",
        //        "filled_qty":"0",
        //        "filled_avg_price":null,
        //        "order_class":"",
        //        "order_type":"limit",
        //        "type":"limit",
        //        "side":"buy",
        //        "time_in_force":"day",
        //        "limit_price":"14000",
        //        "stop_price":null,
        //        "status":"accepted",
        //        "extended_hours":false,
        //        "legs":null,
        //        "trail_percent":null,
        //        "trail_price":null,
        //        "hwm":null,
        //        "commission":"0.42",
        //        "source":null
        //    }
        //
        $marketId = $this->safe_string($order, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $symbol = $market['symbol'];
        $alpacaStatus = $this->safe_string($order, 'status');
        $status = $this->parse_order_status($alpacaStatus);
        $feeValue = $this->safe_string($order, 'commission');
        $fee = null;
        if ($feeValue !== null) {
            $fee = array(
                'cost' => $feeValue,
                'currency' => 'USD',
            );
        }
        $orderType = $this->safe_string($order, 'order_type');
        if ($orderType !== null) {
            if (mb_strpos($orderType, 'limit') !== false) {
                // might be limit or stop-limit
                $orderType = 'limit';
            }
        }
        $datetime = $this->safe_string($order, 'submitted_at');
        $timestamp = $this->parse8601($datetime);
        return $this->safe_order(array(
            'id' => $this->safe_string($order, 'id'),
            'clientOrderId' => $this->safe_string($order, 'client_order_id'),
            'timestamp' => $timestamp,
            'datetime' => $datetime,
            'lastTradeTimeStamp' => null,
            'status' => $status,
            'symbol' => $symbol,
            'type' => $orderType,
            'timeInForce' => $this->parse_time_in_force($this->safe_string($order, 'time_in_force')),
            'postOnly' => null,
            'side' => $this->safe_string($order, 'side'),
            'price' => $this->safe_number($order, 'limit_price'),
            'stopPrice' => $this->safe_number($order, 'stop_price'),
            'triggerPrice' => $this->safe_number($order, 'stop_price'),
            'cost' => null,
            'average' => $this->safe_number($order, 'filled_avg_price'),
            'amount' => $this->safe_number($order, 'qty'),
            'filled' => $this->safe_number($order, 'filled_qty'),
            'remaining' => null,
            'trades' => null,
            'fee' => $fee,
            'info' => $order,
        ), $market);
    }

    public function parse_order_status($status) {
        $statuses = array(
            'pending_new' => 'open',
            'accepted' => 'open',
            'new' => 'open',
            'partially_filled' => 'open',
            'activated' => 'open',
            'filled' => 'closed',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_time_in_force($timeInForce) {
        $timeInForces = array(
            'day' => 'Day',
        );
        return $this->safe_string($timeInForces, $timeInForce, $timeInForce);
    }

    public function parse_trade($trade, ?array $market = null): array {
        //
        //   {
        //       "t":"2022-06-14T05:00:00.027869Z",
        //       "x":"CBSE",
        //       "p":"21942.15",
        //       "s":"0.0001",
        //       "tks":"S",
        //       "i":"355681339"
        //   }
        //
        $marketId = $this->safe_string($trade, 'S');
        $symbol = $this->safe_symbol($marketId, $market);
        $datetime = $this->safe_string($trade, 't');
        $timestamp = $this->parse8601($datetime);
        $alpacaSide = $this->safe_string($trade, 'tks');
        if ($alpacaSide === 'B') {
            $side = 'buy';
        } elseif ($alpacaSide === 'S') {
            $side = 'sell';
        }
        $priceString = $this->safe_string($trade, 'p');
        $amountString = $this->safe_string($trade, 's');
        return $this->safe_trade(array(
            'info' => $trade,
            'id' => $this->safe_string($trade, 'i'),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'order' => null,
            'type' => null,
            'side' => $side,
            'takerOrMaker' => 'taker',
            'price' => $priceString,
            'amount' => $amountString,
            'cost' => null,
            'fee' => null,
        ), $market);
    }

    public function sign($path, $api = 'instruments', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $endpoint = '/' . $this->implode_params($path, $params);
        $url = $this->implode_hostname($this->urls['api'][$api]) . $endpoint;
        $headers = ($headers !== null) ? $headers : array();
        $this->check_required_credentials();
        $headers['Authorization'] = 'Bearer ' . $this->apiKey;
        $query = $this->omit($params, $this->extract_params($path));
        if ($query) {
            $body = $this->json($query);
            $headers['Content-Type'] = 'application/json';
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return null; // default error handler
        }
        // {
        //     "code" => 16,
        //     "message" => "authentication token is missing or invalid",
        //     "description" => "40003"
        // }
        $feedback = $this->id . ' ' . $body;
        $errorCode = $this->safe_string($response, 'code');
        $detailedErrorCode = $this->safe_string($response, 'description');
        if ($code !== null) {
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $errorCode, $feedback);
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $detailedErrorCode, $feedback);
        }
        $message = $this->safe_value($response, 'message', null);
        if ($message !== null) {
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $message, $feedback);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $feedback);
            throw new ExchangeError($feedback);
        }
        return null;
    }
}
