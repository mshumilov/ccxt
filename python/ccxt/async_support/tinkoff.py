# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.async_support.base.exchange import Exchange
from ccxt.abstract.tinkoff import ImplicitAPI
from ccxt.base.types import Balances, Int, Market, Order, OrderBook, OrderSide, OrderType, Str, Trade
from typing import List
from ccxt.base.errors import ExchangeError
from ccxt.base.errors import PermissionDenied
from ccxt.base.errors import BadRequest
from ccxt.base.errors import NotSupported
from ccxt.base.errors import RateLimitExceeded
from ccxt.base.decimal_to_precision import TICK_SIZE


class tinkoff(Exchange, ImplicitAPI):

    def describe(self):
        return self.deep_extend(super(tinkoff, self).describe(), {
            'id': 'tinkoff',
            'name': 'Tinkoff',
            'countries': ['RU'],
            'rateLimit': 333,
            'hostname': 'tinkoff.ru',
            'pro': True,
            'urls': {
                'logo': 'https://developer.tinkoff.ru/img/logo_origin.svg',
                'www': 'https://tinkoff.ru',
                'api': {
                    'instruments': 'https://invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.InstrumentsService',
                    'marketdata': 'https://invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.MarketDataService',
                    'operations': 'https://invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.OperationsService',
                    'orders': 'https://invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.OrdersService',
                    'sandbox': 'https://invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.SandboxService',
                    'stoporders': 'https://invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.StopOrdersService',
                    'users': 'https://invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.UsersService',
                    'marketdatastream': 'https://invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.MarketDataStreamService',
                    'operationsstream': 'https://invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.OperationsStreamService',
                    'ordersstream': 'https://invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.OrdersStreamService',
                },
                'test': {
                    'instruments': 'https://sandbox-invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.InstrumentsService',
                    'marketdata': 'https://sandbox-invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.MarketDataService',
                    'operations': 'https://sandbox-invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.OperationsService',
                    'orders': 'https://sandbox-invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.OrdersService',
                    'sandbox': 'https://sandbox-invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.SandboxService',
                    'stoporders': 'https://sandbox-invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.StopOrdersService',
                    'users': 'https://sandbox-invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.UsersService',
                    'marketdatastream': 'https://sandbox-invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.MarketDataStreamService',
                    'operationsstream': 'https://sandbox-invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.OperationsStreamService',
                    'ordersstream': 'https://sandbox-invest-public-api.{hostname}/rest/tinkoff.public.invest.api.contract.v1.OrdersStreamService',
                },
                'doc': 'https://russianinvestments.github.io/investAPI/',
            },
            'has': {
                'CORS': False,
                'spot': True,
                'margin': False,
                'swap': False,
                'future': False,
                'option': False,
                'cancelAllOrders': True,
                'cancelOrder': True,
                'closeAllPositions': False,
                'closePosition': False,
                'createOrder': True,
                'fetchAccounts': True,
                'fetchBalance': True,
                'fetchBidsAsks': False,
                'fetchClosedOrders': True,
                'fetchCurrencies': False,
                'fetchDepositAddress': False,
                'fetchDepositAddressesByNetwork': False,
                'fetchDeposits': False,
                'fetchDepositsWithdrawals': False,
                'fetchFundingHistory': False,
                'fetchFundingRate': False,
                'fetchFundingRates': False,
                'fetchMarkets': True,
                'fetchMyTrades': False,
                'fetchOHLCV': True,
                'fetchOpenOrder': False,
                'fetchOpenOrders': True,
                'fetchOrder': True,
                'fetchOrderBook': True,
                'fetchOrders': True,
                'fetchPositions': False,
                'fetchStatus': True,
                'fetchTicker': False,
                'fetchTickers': False,
                'fetchTime': False,
                'fetchTrades': True,
                'fetchTradingFee': False,
                'fetchTradingFees': False,
                'fetchTransactionFees': False,
                'fetchTransactions': False,
                'fetchTransfers': False,
                'fetchWithdrawals': False,
                'publicAPI': False,
                'setLeverage': False,
                'setMarginMode': False,
                'transfer': False,
                'withdraw': False,
            },
            'api': {
                'instruments': {
                    'post': [
                        'Etfs',
                    ],
                },
                'marketdata': {
                    'post': [
                        'GetLastTrades',
                        'GetOrderBook',
                        'GetCandles',
                    ],
                },
                'operations': {
                    'post': [
                        'GetOperations',
                        'GetPortfolio',
                        'GetPositions',
                        'GetWithdrawLimits',
                    ],
                },
                'orders': {
                    'post': [
                        'PostOrder',
                        'CancelOrder',
                        'GetOrderState',
                        'GetOrders',
                    ],
                },
                'users': {
                    'post': [
                        'GetAccounts',
                    ],
                },
            },
            'timeframes': {
                '1m': 'CANDLE_INTERVAL_1_MIN',
                '2m': 'CANDLE_INTERVAL_2_MIN',
                '3m': 'CANDLE_INTERVAL_3_MIN',
                '5m': 'CANDLE_INTERVAL_5_MIN',
                '10m': 'CANDLE_INTERVAL_10_MIN',
                '15m': 'CANDLE_INTERVAL_15_MIN',
                '30m': 'CANDLE_INTERVAL_15_MIN',
                '1h': 'CANDLE_INTERVAL_HOUR',
                '2h': 'CANDLE_INTERVAL_2_HOUR',
                '4h': 'CANDLE_INTERVAL_4_HOUR',
                '1d': 'CANDLE_INTERVAL_DAY',
                '1w': 'CANDLE_INTERVAL_WEEK',
                '1M': 'CANDLE_INTERVAL_MONTH',
            },
            'precisionMode': TICK_SIZE,
            'requiredCredentials': {
                'apiKey': True,
                'secret': False,
            },
            'options': {
                'fetchOHLCV': {
                    'limit': 200,
                },
            },
            'exceptions': {
                'exact': {
                    '404': ExchangeError,
                    '40003': PermissionDenied,
                    '80002': RateLimitExceeded,
                    '30014': BadRequest,
                },
            },
        })

    async def fetch_status(self, params={}):
        """
        the latest known information on the availability of the exchange API
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `status structure <https://docs.ccxt.com/#/?id=exchange-status-structure>`
        """
        return {
            'status': 'ok',
            'updated': None,
            'eta': None,
            'url': None,
            'info': params,
        }

    async def fetch_accounts(self, params={}):
        """
        fetch all the accounts associated with a profile
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a dictionary of `account structures <https://docs.ccxt.com/#/?id=account-structure>` indexed by the account type
        """
        await self.load_markets()
        response = await self.usersPostGetAccounts(params)
        #
        #   {
        #     "accounts": [
        #       {
        #         "id": "50f2e57e-3941-4555-9d14-056c39275c14",
        #         "type": "ACCOUNT_TYPE_TINKOFF",
        #         "name": "",
        #         "status": "ACCOUNT_STATUS_OPEN",
        #         "openedDate": "2024-03-13T14:55:11.555046Z",
        #         "accessLevel": "ACCOUNT_ACCESS_LEVEL_FULL_ACCESS"
        #       }
        #     ]
        #   }
        #
        result = self.safe_value(response, 'accounts', [])
        return self.parse_accounts(self.filter_by(result, 'status', 'ACCOUNT_STATUS_OPEN'))

    def parse_account(self, account):
        #
        #      {
        #         "id": "50f2e57e-3941-4555-9d14-056c39275c14",
        #         "type": "ACCOUNT_TYPE_TINKOFF",
        #         "name": "",
        #         "status": "ACCOUNT_STATUS_OPEN",
        #         "openedDate": "2024-03-13T14:55:11.555046Z",
        #         "accessLevel": "ACCOUNT_ACCESS_LEVEL_FULL_ACCESS"
        #      }
        #
        return {
            'info': account,
            'id': self.safe_string(account, 'id'),
            'name': self.safe_string(account, 'name'),
            'type': 'main',
            'code': 'RUB',
        }

    async def fetch_markets(self, params={}):
        """
        retrieves data on all markets for tinkoff
        :param dict [params]: extra parameters specific to the exchange api endpoint
        :returns dict[]: an array of objects representing market data
        """
        request = {
            'instrumentStatus': 'INSTRUMENT_STATUS_BASE',
        }
        etfs = await self.instrumentsPostEtfs(self.extend(request, params))
        markets = self.parse_markets(etfs['instruments'])
        return markets

    def parse_market(self, asset) -> Market:
        #
        # {
        #     'figi': 'BBG00KLHY7D7',
        #     'ticker': 'DRIV',
        #     'classCode': 'SPBXM',
        #     'isin': 'US37954Y6243',
        #     'lot': '1',
        #     'currency': 'usd',
        #     'shortEnabledFlag': False,
        #     'name': 'Global X Autonomous & Electric Vehicles ETF',
        #     'exchange': 'spb_close',
        #     'focusType': 'equity',
        #     'countryOfRisk': 'US',
        #     'countryOfRiskName': 'Соединенные Штаты Америки',
        #     'sector': '',
        #     'rebalancingFreq': '',
        #     'tradingStatus': 'SECURITY_TRADING_STATUS_NOT_AVAILABLE_FOR_TRADING',
        #     'otcFlag': False,
        #     'buyAvailableFlag': True,
        #     'sellAvailableFlag': True,
        #     'minPriceIncrement': {'units': '0', 'nano': '10000000'},
        #     'apiTradeAvailableFlag': True,
        #     'uid': '1e15b3a8-9a46-44af-8cf1-59893d0c478f',
        #     'positionUid': 'c76c4b4c-74b2-41d5-902a-da8a1848c5a5',
        #     'assetUid': 'f9f2e0e0-3f73-4ecd-a3bb-363e29058ed6',
        #     'forIisFlag': False,
        #     'forQualInvestorFlag': True,
        #     'weekendFlag': False,
        #     'blockedTcaFlag': False,
        #     'liquidityFlag': True,
        #     'first1minCandleDate': '2023-01-23T12:31:00Z',
        #     'first1dayCandleDate': '2023-01-23T07:00:00Z',
        #     'brand': {'logoName': 'US37954Y6243.png', 'logoBaseColor': '#FF4E00', 'textColor': '#ffffff'}
        # }
        #
        marketId = self.safe_string(asset, 'uid')
        baseId = self.safe_string(asset, 'ticker')
        quoteId = self.safe_string(asset, 'currency')
        base = self.safe_currency_code(baseId)
        quote = self.safe_currency_code(quoteId)
        symbol = base
        active = self.safe_value(asset, 'forIisFlag')
        minAmount = self.safe_number(asset, 'lot')
        amount = 1
        increment = self.safe_value(asset, 'minPriceIncrement')
        price = self.unit_to_number(increment)
        return {
            'id': marketId,
            'symbol': symbol,
            'base': base,
            'quote': quote,
            'settle': None,
            'baseId': baseId,
            'quoteId': quoteId,
            'settleId': None,
            'type': 'spot',
            'spot': True,
            'margin': None,
            'swap': False,
            'future': False,
            'option': False,
            'active': active,
            'contract': False,
            'linear': None,
            'inverse': None,
            'contractSize': None,
            'expiry': None,
            'expiryDatetime': None,
            'strike': None,
            'optionType': None,
            'precision': {
                'amount': amount,
                'price': price,
            },
            'limits': {
                'leverage': {
                    'min': None,
                    'max': None,
                },
                'amount': {
                    'min': minAmount,
                    'max': None,
                },
                'price': {
                    'min': None,
                    'max': None,
                },
                'cost': {
                    'min': None,
                    'max': None,
                },
            },
            'created': None,
            'info': asset,
        }

    async def fetch_trades(self, symbol: str, since: Int = None, limit: Int = None, params={}) -> List[Trade]:
        """
        get the list of most recent trades for a particular symbol
        :param str symbol: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum amount of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.loc]: crypto location, default: us
        :param str [params.method]: method, default: marketPublicGetV1beta3CryptoLocTrades
        :returns Trade[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        await self.load_markets()
        market = self.market(symbol)
        marketId = market['id']
        loc = self.safe_string(params, 'loc', 'us')
        request = {
            'symbols': marketId,
            'loc': loc,
        }
        params = self.omit(params, ['loc', 'method'])
        if since is not None:
            request['from'] = self.iso8601(since)
        if limit is not None:
            request['limit'] = limit
        response = await self.marketdataPostGetLastTrades(self.extend(request, params))
        #
        # {
        #     "next_page_token":null,
        #     "trades":{
        #        "BTC/USD":[
        #           {
        #              "i":36440704,
        #              "p":22625,
        #              "s":0.0001,
        #              "t":"2022-07-21T11:47:31.073391Z",
        #              "tks":"B"
        #           }
        #        ]
        #     }
        # }
        #
        # {
        #     "trades":{
        #        "BTC/USD":{
        #           "i":36440704,
        #           "p":22625,
        #           "s":0.0001,
        #           "t":"2022-07-21T11:47:31.073391Z",
        #           "tks":"B"
        #        }
        #     }
        # }
        #
        trades = self.safe_value(response, 'trades', {})
        symbolTrades = self.safe_value(trades, marketId, {})
        if not isinstance(symbolTrades, list):
            symbolTrades = [symbolTrades]
        return self.parse_trades(symbolTrades, market, since, limit)

    async def fetch_order_book(self, symbol: str, limit: Int = None, params={}) -> OrderBook:
        """
        fetches information on open orders with bid(buy) and ask(sell) prices, volumes and other data
        :param str symbol: unified symbol of the market to fetch the order book for
        :param int [limit]: the maximum amount of order book entries to return
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param str [params.loc]: crypto location, default: us
        :returns dict: A dictionary of `order book structures <https://github.com/ccxt/ccxt/wiki/Manual#order-book-structure>` indexed by market symbols
        """
        await self.load_markets()
        market = self.market(symbol)
        id = market['id']
        request = {
            'depth': limit,
            'instrumentId': id,
        }
        response = await self.marketdataPostGetOrderBook(self.extend(request, params))
        #
        #   {
        #       "orderbooks":{
        #          "BTC/USD":{
        #             "a":[
        #                {
        #                   "p":22208,
        #                   "s":0.0051
        #                },
        #                {
        #                   "p":22209,
        #                   "s":0.1123
        #                },
        #                {
        #                   "p":22210,
        #                   "s":0.2465
        #                }
        #             ],
        #             "b":[
        #                {
        #                   "p":22203,
        #                   "s":0.395
        #                },
        #                {
        #                   "p":22202,
        #                   "s":0.2465
        #                },
        #                {
        #                   "p":22201,
        #                   "s":0.6455
        #                }
        #             ],
        #             "t":"2022-07-19T13:41:55.13210112Z"
        #          }
        #       }
        #   }
        #
        orderbooks = self.safe_value(response, 'orderbooks', {})
        rawOrderbook = self.safe_value(orderbooks, id, {})
        timestamp = self.parse8601(self.safe_string(rawOrderbook, 't'))
        return self.parse_order_book(rawOrderbook, market['symbol'], timestamp, 'b', 'a', 'p', 's')

    async def fetch_ohlcv(self, symbol: str, timeframe='1m', since: Int = 0, limit: Int = None, params={}) -> List[list]:
        """
        fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        :param str symbol: unified symbol of the market to fetch OHLCV data for
        :param str timeframe: the length of time each candle represents
        :param int [since]: timestamp in ms of the earliest candle to fetch
        :param int [limit]: the maximum amount of candles to fetch
        :returns int[][]: A list of candles ordered, open, high, low, close, volume
        """
        await self.load_markets()
        market = self.market(symbol)
        marketId = market['id']
        request = {
            'instrumentId': marketId,
        }
        duration = self.parse_timeframe(timeframe)
        options = self.safe_value(self.options, 'fetchOHLCV', {})
        defaultLimit = self.safe_integer(options, 'limit', 500)
        if limit is None:
            limit = defaultLimit
        else:
            limit = min(limit, defaultLimit)
        fromMs = since
        if since is None:
            fromMs = self.milliseconds() - limit * duration * 1000
        maxPrepeats = 10
        i = 0
        ohlcvs = []
        while(len(ohlcvs) < limit and i < maxPrepeats):
            to = self.sum(fromMs, limit * duration * 1000, 1)
            request['from'] = self.ymdhms(fromMs, 'T') + '.000Z'
            request['to'] = self.ymdhms(to, 'T') + '.000Z'
            request['interval'] = self.safe_string(self.timeframes, timeframe, 'CANDLE_INTERVAL_UNSPECIFIED')
            response = await self.marketdataPostGetCandles(self.extend(request, params))
            #
            # {'candles':
            #   [
            #     {
            #       'open': {'units': '6', 'nano': '530000000'},
            #       'high': {'units': '6', 'nano': '560000000'},
            #       'low': {'units': '6', 'nano': '510000000'},
            #       'close': {'units': '6', 'nano': '500000000'},
            #       'volume': '427915',
            #       'time': '2024-02-27T06:59:00Z',
            #       'isComplete': True,
            #       'candleSource': 'CANDLE_SOURCE_EXCHANGE'
            #     }
            #   ]
            # }
            #
            newCandles = self.safe_value(response, 'candles', {})
            if not isinstance(newCandles, list):
                raise ExchangeError('No candles')
            ohlcvs = self.array_concat(ohlcvs, newCandles)
            i += 1
            fromMs = self.sum(fromMs, -limit * duration * 1000)
        ohlcvs = self.sort_by(ohlcvs, 'time')
        ohlcvs = self.array_slice(ohlcvs, len(ohlcvs) - limit, len(ohlcvs))
        return self.parse_ohlcvs(ohlcvs, market, timeframe, since, limit)

    def parse_ohlcv(self, ohlcv, market: Market = None) -> list:
        #
        #  {
        #     'open': {'units': '6', 'nano': '530000000'},
        #     'high': {'units': '6', 'nano': '560000000'},
        #     'low': {'units': '6', 'nano': '510000000'},
        #     'close': {'units': '6', 'nano': '500000000'},
        #     'volume': '427915',
        #     'time': '2024-02-27T06:59:00Z',
        #     'isComplete': True,
        #     'candleSource': 'CANDLE_SOURCE_EXCHANGE'
        #  }
        #
        datetime = self.safe_string(ohlcv, 'time')
        timestamp = self.parse8601(datetime)
        return [
            timestamp,
            self.unit_to_number(ohlcv['open']),
            self.unit_to_number(ohlcv['high']),
            self.unit_to_number(ohlcv['low']),
            self.unit_to_number(ohlcv['close']),
            self.safe_integer(ohlcv, 'volume'),
        ]

    def unit_to_number(self, unit={}) -> float:
        units = self.safe_integer(unit, 'units')
        nano = self.safe_integer(unit, 'nano')
        return units + nano / 1000000000

    async def create_order(self, symbol: str, type: OrderType, side: OrderSide, amount: float, price: float = None, params={}):
        """
        create a trade order
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market', 'limit' or 'stop_limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much of currency you want to trade in units of base currency
        :param float [price]: the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param float [params.triggerPrice]: The price at which a trigger order is triggered at
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        await self.load_markets()
        market = self.market(symbol)
        id = market['id']
        request = {
            'symbol': id,
            'qty': self.amount_to_precision(symbol, amount),
            'side': side,
            'type': type,  # market, limit, stop_limit
        }
        triggerPrice = self.safe_string_n(params, ['triggerPrice', 'stop_price'])
        if triggerPrice is not None:
            newType = None
            if type.find('limit') >= 0:
                newType = 'stop_limit'
            else:
                raise NotSupported(self.id + ' createOrder() does not support stop orders for ' + type + ' orders, only stop_limit orders are supported')
            request['stop_price'] = self.price_to_precision(symbol, triggerPrice)
            request['type'] = newType
        if type.find('limit') >= 0:
            request['limit_price'] = self.price_to_precision(symbol, price)
        defaultTIF = self.safe_string(self.options, 'defaultTimeInForce')
        request['time_in_force'] = self.safe_string(params, 'timeInForce', defaultTIF)
        params = self.omit(params, ['timeInForce', 'triggerPrice'])
        clientOrderIdprefix = self.safe_string(self.options, 'clientOrderId')
        uuid = self.uuid()
        parts = uuid.split('-')
        random_id = ''.join(parts)
        defaultClientId = self.implode_params(clientOrderIdprefix, {'id': random_id})
        clientOrderId = self.safe_string(params, 'clientOrderId', defaultClientId)
        request['client_order_id'] = clientOrderId
        params = self.omit(params, ['clientOrderId'])
        order = await self.ordersPostPostOrder(self.extend(request, params))
        #
        #   {
        #      "id": "61e69015-8549-4bfd-b9c3-01e75843f47d",
        #      "client_order_id": "eb9e2aaa-f71a-4f51-b5b4-52a6c565dad4",
        #      "created_at": "2021-03-16T18:38:01.942282Z",
        #      "updated_at": "2021-03-16T18:38:01.942282Z",
        #      "submitted_at": "2021-03-16T18:38:01.937734Z",
        #      "filled_at": null,
        #      "expired_at": null,
        #      "canceled_at": null,
        #      "failed_at": null,
        #      "replaced_at": null,
        #      "replaced_by": null,
        #      "replaces": null,
        #      "asset_id": "b0b6dd9d-8b9b-48a9-ba46-b9d54906e415",
        #      "symbol": "AAPL",
        #      "asset_class": "us_equity",
        #      "notional": "500",
        #      "qty": null,
        #      "filled_qty": "0",
        #      "filled_avg_price": null,
        #      "order_class": "",
        #      "order_type": "market",
        #      "type": "market",
        #      "side": "buy",
        #      "time_in_force": "day",
        #      "limit_price": null,
        #      "stop_price": null,
        #      "status": "accepted",
        #      "extended_hours": False,
        #      "legs": null,
        #      "trail_percent": null,
        #      "trail_price": null,
        #      "hwm": null
        #   }
        #
        return self.parse_order(order, market)

    async def cancel_order(self, id: str, symbol: Str = None, params={}):
        """
        cancels an open order
        :param str id: order id
        :param str symbol: unified symbol of the market the order was made in
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: An `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        request = {
            'order_id': id,
        }
        response = await self.ordersPostCancelOrder(self.extend(request, params))
        #
        #   {
        #       "code": 40410000,
        #       "message": "order is not found."
        #   }
        #
        return self.safe_value(response, 'message', {})

    async def cancel_all_orders(self, symbol: Str = None, params={}):
        """
        cancel all open orders in a market
        :param str symbol: alpaca cancelAllOrders cannot setting symbol, it will cancel all open orders
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        await self.load_markets()
        response = await self.ordersPostCancelOrder(params)
        if isinstance(response, list):
            return self.parse_orders(response, None)
        else:
            return response

    async def fetch_order(self, id: str, symbol: Str = None, params={}):
        """
        fetches information on an order made by the user
        :param str symbol: unified symbol of the market the order was made in
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: An `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        await self.load_markets()
        request = {
            'order_id': id,
        }
        order = await self.ordersPostGetOrderState(self.extend(request, params))
        marketId = self.safe_string(order, 'symbol')
        market = self.safe_market(marketId)
        return self.parse_order(order, market)

    async def fetch_orders(self, symbol: Str = None, since: Int = None, limit: Int = None, params={}) -> List[Order]:
        """
        fetches information on multiple orders made by the user
        :param str symbol: unified market symbol of the market orders were made in
        :param int [since]: the earliest time in ms to fetch orders for
        :param int [limit]: the maximum number of order structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param int [params.until]: the latest time in ms to fetch orders for
        :returns Order[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        await self.load_markets()
        request = {
            'status': 'all',
        }
        market = None
        if symbol is not None:
            market = self.market(symbol)
            request['symbols'] = market['id']
        until = self.safe_integer(params, 'until')
        if until is not None:
            params = self.omit(params, 'until')
            request['endTime'] = until
        if since is not None:
            request['after'] = since
        if limit is not None:
            request['limit'] = limit
        response = await self.ordersPostGetOrders(self.extend(request, params))
        #
        #     [
        #         {
        #           "id": "cbaf12d7-69b8-49c0-a31b-b46af35c755c",
        #           "client_order_id": "ccxt_b36156ae6fd44d098ac9c179bab33efd",
        #           "created_at": "2023-11-17T04:21:42.234579Z",
        #           "updated_at": "2023-11-17T04:22:34.442765Z",
        #           "submitted_at": "2023-11-17T04:21:42.233357Z",
        #           "filled_at": null,
        #           "expired_at": null,
        #           "canceled_at": "2023-11-17T04:22:34.399019Z",
        #           "failed_at": null,
        #           "replaced_at": null,
        #           "replaced_by": null,
        #           "replaces": null,
        #           "asset_id": "77c6f47f-0939-4b23-b41e-47b4469c4bc8",
        #           "symbol": "LTC/USDT",
        #           "asset_class": "crypto",
        #           "notional": null,
        #           "qty": "0.001",
        #           "filled_qty": "0",
        #           "filled_avg_price": null,
        #           "order_class": "",
        #           "order_type": "limit",
        #           "type": "limit",
        #           "side": "sell",
        #           "time_in_force": "gtc",
        #           "limit_price": "1000",
        #           "stop_price": null,
        #           "status": "canceled",
        #           "extended_hours": False,
        #           "legs": null,
        #           "trail_percent": null,
        #           "trail_price": null,
        #           "hwm": null,
        #           "subtag": null,
        #           "source": "access_key"
        #         }
        #     ]
        #
        return self.parse_orders(response, market, since, limit)

    async def fetch_open_orders(self, symbol: Str = None, since: Int = None, limit: Int = None, params={}) -> List[Order]:
        """
        fetch all unfilled currently open orders
        :param str symbol: unified market symbol of the market orders were made in
        :param int [since]: the earliest time in ms to fetch orders for
        :param int [limit]: the maximum number of order structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param int [params.until]: the latest time in ms to fetch orders for
        :returns Order[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        request = {
            'status': 'open',
        }
        return await self.fetch_orders(symbol, since, limit, self.extend(request, params))

    async def fetch_closed_orders(self, symbol: Str = None, since: Int = None, limit: Int = None, params={}) -> List[Order]:
        """
        fetches information on multiple closed orders made by the user
        :param str symbol: unified market symbol of the market orders were made in
        :param int [since]: the earliest time in ms to fetch orders for
        :param int [limit]: the maximum number of order structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :param int [params.until]: the latest time in ms to fetch orders for
        :returns Order[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        request = {
            'status': 'closed',
        }
        return await self.fetch_orders(symbol, since, limit, self.extend(request, params))

    def parse_order(self, order, market: Market = None) -> Order:
        #
        #    {
        #        "id":"6ecfcc34-4bed-4b53-83ba-c564aa832a81",
        #        "client_order_id":"ccxt_1c6ceab0b5e84727b2f1c0394ba17560",
        #        "created_at":"2022-06-14T13:59:30.224037068Z",
        #        "updated_at":"2022-06-14T13:59:30.224037068Z",
        #        "submitted_at":"2022-06-14T13:59:30.221856828Z",
        #        "filled_at":null,
        #        "expired_at":null,
        #        "canceled_at":null,
        #        "failed_at":null,
        #        "replaced_at":null,
        #        "replaced_by":null,
        #        "replaces":null,
        #        "asset_id":"64bbff51-59d6-4b3c-9351-13ad85e3c752",
        #        "symbol":"BTCUSD",
        #        "asset_class":"crypto",
        #        "notional":null,
        #        "qty":"0.01",
        #        "filled_qty":"0",
        #        "filled_avg_price":null,
        #        "order_class":"",
        #        "order_type":"limit",
        #        "type":"limit",
        #        "side":"buy",
        #        "time_in_force":"day",
        #        "limit_price":"14000",
        #        "stop_price":null,
        #        "status":"accepted",
        #        "extended_hours":false,
        #        "legs":null,
        #        "trail_percent":null,
        #        "trail_price":null,
        #        "hwm":null,
        #        "commission":"0.42",
        #        "source":null
        #    }
        #
        marketId = self.safe_string(order, 'symbol')
        market = self.safe_market(marketId, market)
        symbol = market['symbol']
        alpacaStatus = self.safe_string(order, 'status')
        status = self.parse_order_status(alpacaStatus)
        feeValue = self.safe_string(order, 'commission')
        fee = None
        if feeValue is not None:
            fee = {
                'cost': feeValue,
                'currency': 'USD',
            }
        orderType = self.safe_string(order, 'order_type')
        if orderType is not None:
            if orderType.find('limit') >= 0:
                # might be limit or stop-limit
                orderType = 'limit'
        datetime = self.safe_string(order, 'submitted_at')
        timestamp = self.parse8601(datetime)
        return self.safe_order({
            'id': self.safe_string(order, 'id'),
            'clientOrderId': self.safe_string(order, 'client_order_id'),
            'timestamp': timestamp,
            'datetime': datetime,
            'lastTradeTimeStamp': None,
            'status': status,
            'symbol': symbol,
            'type': orderType,
            'timeInForce': self.parse_time_in_force(self.safe_string(order, 'time_in_force')),
            'postOnly': None,
            'side': self.safe_string(order, 'side'),
            'price': self.safe_number(order, 'limit_price'),
            'stopPrice': self.safe_number(order, 'stop_price'),
            'triggerPrice': self.safe_number(order, 'stop_price'),
            'cost': None,
            'average': self.safe_number(order, 'filled_avg_price'),
            'amount': self.safe_number(order, 'qty'),
            'filled': self.safe_number(order, 'filled_qty'),
            'remaining': None,
            'trades': None,
            'fee': fee,
            'info': order,
        }, market)

    def parse_order_status(self, status):
        statuses = {
            'pending_new': 'open',
            'accepted': 'open',
            'new': 'open',
            'partially_filled': 'open',
            'activated': 'open',
            'filled': 'closed',
        }
        return self.safe_string(statuses, status, status)

    def parse_balance(self, response) -> Balances:
        #
        #   {
        #     "blockedGuarantee": [
        #       {
        #         "nano": 5,
        #         "currency": "currency",
        #         "units": "units"
        #       }
        #     ],
        #     "money": [
        #       {
        #         "nano": 5,
        #         "currency": "currency",
        #         "units": "units"
        #       }
        #     ],
        #     "blocked": [
        #       {
        #         "nano": 5,
        #         "currency": "currency",
        #         "units": "units"
        #       }
        #     ]
        #   }
        #
        result = {'info': response}
        money = self.safe_value(response, 'money', [])
        blocked = self.safe_value(response, 'blocked', [])
        blocked_guarantee = self.safe_value(response, 'blockedGuarantee', [])
        for i in range(0, len(money)):
            balance = money[i]
            currencyId = self.safe_string(balance, 'currency')
            code = self.safe_currency_code(currencyId)
            amount = self.unit_to_number(balance)
            result[code] = {
                'free': amount,
                'total': amount,
            }
        for i in range(0, len(blocked)):
            balance = blocked[i]
            currencyId = self.safe_string(balance, 'currency')
            code = self.safe_currency_code(currencyId)
            account = self.safe_value(result, code, {})
            amount = self.unit_to_number(balance)
            account['used'] = amount
            total = self.safe_number(account, 'total', 0)
            account['total'] = total + amount
        for i in range(0, len(blocked_guarantee)):
            balance = blocked_guarantee[i]
            currencyId = self.safe_string(balance, 'currency')
            code = self.safe_currency_code(currencyId)
            account = self.safe_value(result, code, {})
            amount = self.unit_to_number(balance)
            account['used'] = amount
            total = self.safe_number(account, 'total', 0)
            account['total'] = total + amount
        return self.safe_balance(result)

    async def fetch_balance(self, params={}) -> Balances:
        """
        query for balance and get the amount of funds available for trading or funds locked in orders
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `balance structure <https://docs.ccxt.com/#/?id=balance-structure>`
        """
        accounts = await self.load_accounts()
        if len(accounts) == 0:
            raise ExchangeError('No accounts found')
        params['account_id'] = accounts[0]['id']
        response = await self.operationsPostGetWithdrawLimits(params)
        return self.parse_balance(response)

    def parse_time_in_force(self, timeInForce):
        timeInForces = {
            'day': 'Day',
        }
        return self.safe_string(timeInForces, timeInForce, timeInForce)

    def parse_trade(self, trade, market: Market = None) -> Trade:
        #
        #   {
        #       "t":"2022-06-14T05:00:00.027869Z",
        #       "x":"CBSE",
        #       "p":"21942.15",
        #       "s":"0.0001",
        #       "tks":"S",
        #       "i":"355681339"
        #   }
        #
        marketId = self.safe_string(trade, 'S')
        symbol = self.safe_symbol(marketId, market)
        datetime = self.safe_string(trade, 't')
        timestamp = self.parse8601(datetime)
        alpacaSide = self.safe_string(trade, 'tks')
        side: str
        if alpacaSide == 'B':
            side = 'buy'
        elif alpacaSide == 'S':
            side = 'sell'
        priceString = self.safe_string(trade, 'p')
        amountString = self.safe_string(trade, 's')
        return self.safe_trade({
            'info': trade,
            'id': self.safe_string(trade, 'i'),
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'symbol': symbol,
            'order': None,
            'type': None,
            'side': side,
            'takerOrMaker': 'taker',
            'price': priceString,
            'amount': amountString,
            'cost': None,
            'fee': None,
        }, market)

    def sign(self, path, api='instruments', method='POST', params={}, headers=None, body=None):
        self.check_required_credentials()
        endpoint = '/' + self.implode_params(path, params)
        url = self.implode_hostname(self.urls['api'][api]) + endpoint
        headers = headers if (headers is not None) else {}
        headers['Authorization'] = 'Bearer ' + self.apiKey
        headers['Content-Type'] = 'application/json'
        query = self.omit(params, self.extract_params(path))
        body = self.json(query)
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def handle_errors(self, code, reason, url, method, headers, body, response, requestHeaders, requestBody):
        if response is None:
            return None  # default error handler
        # {
        #     "code": 16,
        #     "message": "authentication token is missing or invalid",
        #     "description": "40003"
        # }
        if code is not None:
            if code >= 400:
                self.log('ERROR:', body)
            feedback = self.id + ' ' + body
            errorCode = self.safe_string(response, 'code')
            detailedErrorCode = self.safe_string(response, 'description')
            self.throw_exactly_matched_exception(self.exceptions['exact'], errorCode, feedback)
            self.throw_exactly_matched_exception(self.exceptions['exact'], detailedErrorCode, feedback)
        message = self.safe_value(response, 'message', None)
        if message is not None:
            feedback = self.id + ' ' + body
            self.throw_exactly_matched_exception(self.exceptions['exact'], message, feedback)
            self.throw_broadly_matched_exception(self.exceptions['broad'], message, feedback)
            raise ExchangeError(feedback)
        return None
